generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ENUMS
 */

enum TaskStatus {
  todo
  in_progress
  blocked
  done
}

enum ProjectRole {
  OWNER
  MEMBER
}

enum SocialProvider {
  GOOGLE
  NAVER
}

enum InvitationStatus {
  pending
  accepted
  rejected
}

/**
 * MODELS
 */

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  name         String
  password     String? // 소셜 가입자는 null 가능
  profileImage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // relations
  ownedProjects   Project[]       @relation("ProjectOwner")
  tasks           Task[]          @relation("UserTasks")
  members         ProjectMember[]
  comments        Comment[]
  invitationsSent Invitation[]    @relation("ProjectInvitationsByUser")
  socialAccounts  SocialAccount[]
  RefreshToken    RefreshToken?
}

model SocialAccount {
  id           Int            @id @default(autoincrement())
  userId       Int
  provider     SocialProvider
  providerUid  String // 각 제공자에서 받은 고유 식별자(sub 등)
  email        String? // 제공자가 내려준 이메일(선택)
  displayName  String? // 제공자 프로필 이름(선택)
  profileImage String? // 제공자 프로필 이미지(선택)
  accessToken  String
  refreshToken String
  expiryDate   DateTime
  createdAt    DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUid])
  @@index([userId])
  @@index([email])
  @@index([provider, providerUid])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  tokenHash String   @unique // 암호화된 토큰
  createdAt DateTime @default(now())
  expiresAt DateTime // 만료 시각

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // 유저와 연결

  @@index([userId])
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Task[]
  members     ProjectMember[]
  invitations Invitation[]    @relation("ProjectInvitations")

  @@index([ownerId])
  @@index([createdAt])
  @@index([name])
}

model ProjectMember {
  projectId Int
  userId    Int
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@index([projectId])
}

model Task {
  id          Int        @id @default(autoincrement())
  projectId   Int
  assigneeId  Int?
  title       String
  description String?
  status      TaskStatus @default(todo)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?         @relation("UserTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  comments    Comment[]
  attachments Attachments[]
  subtasks    Subtask[]
  tags        TaskTag[]

  // index
  @@index([projectId, status])
  @@index([assigneeId])
  @@index([createdAt])
}

model Comment {
  id        Int      @id @default(autoincrement())
  taskId    Int
  authorId  Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([authorId])
}

model Subtask {
  id        Int        @id @default(autoincrement())
  title     String
  taskId    Int
  status    TaskStatus @default(todo)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model Attachments {
  id           Int      @id @default(autoincrement())
  taskId       Int
  originalName String // 원본 파일명 (사용자 업로드 시 이름)
  storedName   String // 저장 파일명 (충돌 방지용 랜덤/UUID 등)
  relPath      String // 상대 경로(업로드 루트 기준) 예: "tasks/2025/08/19/uuid.pdf"
  mimeType     String?
  size         Int?
  ext          String? // 확장자 (예: "pdf", "png")
  createdAt    DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([storedName])
}

model Invitation {
  id        Int              @id @default(autoincrement())
  projectId Int
  email     String
  token     String           @unique
  createdBy Int
  createdAt DateTime         @default(now())
  expiresAt DateTime?
  status    InvitationStatus @default(pending)

  project Project @relation("ProjectInvitations", fields: [projectId], references: [id], onDelete: Cascade)
  inviter User    @relation("ProjectInvitationsByUser", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([email])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  tasks TaskTag[]
}

model TaskTag {
  taskId Int
  tagId  Int

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
}
