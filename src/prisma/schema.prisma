generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ENUMS
 */

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  DONE
}

enum ProjectRole {
  OWNER
  MEMBER
}

enum SocialProvider {
  GOOGLE
  NAVER
}

/**
 * MODELS
 */

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String?          // 소셜 가입자는 null 가능
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  ownedProjects   Project[]       @relation("ProjectOwner")
  tasks           Task[]          @relation("UserTasks")
  members         ProjectMember[]
  comments        Comment[]
  invitationsSent Invitation[]    @relation("ProjectInvitationsByUser")
  socialAccounts  SocialAccount[]
}

model SocialAccount {
  id          Int            @id @default(autoincrement())
  userId      Int
  provider    SocialProvider
  providerUid String          // 각 제공자에서 받은 고유 식별자(sub 등)
  email       String?         // 제공자가 내려준 이메일(선택)
  displayName String?         // 제공자 프로필 이름(선택)
  imageUrl    String?         // 제공자 프로필 이미지(선택)
  createdAt   DateTime       @default(now())

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUid])
  // index
  @@index([userId])
  @@index([email])
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Task[]
  members     ProjectMember[]
  invitations Invitation[]    @relation("ProjectInvitations")

  // index
  @@index([ownerId])
  @@index([createdAt])
}

model ProjectMember {
  projectId Int
  userId    Int
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  // relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // index
  @@id([projectId, userId])
  @@index([userId])
}

model Task {
  id          Int        @id @default(autoincrement())
  projectId   Int
  assigneeId  Int?
  title       String
  description String?
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  tags        String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // relations
  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee User?     @relation("UserTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  comments Comment[]
  files    File[]
  subtasks Subtask[]

  // index
  @@index([projectId, status])
  @@index([assigneeId])
  @@index([dueDate])
  @@index([createdAt])
}

// 댓글
model Comment {
  id        Int      @id @default(autoincrement())
  taskId    Int
  authorId  Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // index
  @@index([taskId])
  @@index([authorId])
}

// 하위 할 일
model Subtask {
  id        Int      @id @default(autoincrement())
  taskId    Int
  title     String
  done      Boolean  @default(false)
  createdAt DateTime @default(now())

  // relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // index
  @@index([taskId])
}

// 파일
model File {
  id     Int @id @default(autoincrement())
  taskId Int

  
  originalName String  // 원본 파일명 (사용자 업로드 시 이름)

  
  storedName String    // 저장 파일명 (충돌 방지용 랜덤/UUID 등)

  
  relPath String       // 상대 경로(업로드 루트 기준) 예: "tasks/2025/08/19/uuid.pdf"

  mimeType String?
  size     Int?
  ext      String?     // 확장자 (예: "pdf", "png")

  createdAt DateTime @default(now())

  // relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // index
  @@index([taskId])
  @@index([storedName])
}

// 프로젝트 초대
model Invitation {
  id        Int       @id @default(autoincrement())
  projectId Int
  email     String
  token     String    @unique
  createdBy Int
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  // relations
  project Project @relation("ProjectInvitations", fields: [projectId], references: [id], onDelete: Cascade)
  inviter User    @relation("ProjectInvitationsByUser", fields: [createdBy], references: [id], onDelete: Cascade)

  // index
  @@index([projectId])
  @@index([email])
}